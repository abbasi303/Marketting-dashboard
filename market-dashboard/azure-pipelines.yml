# Azure DevOps Pipeline for Marketing Insights Dashboard
trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - docs/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  pythonVersion: '3.9'
  
stages:
- stage: Test
  displayName: 'Test and Quality Checks'
  jobs:
  - job: QualityChecks
    displayName: 'Code Quality and Security'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
        architecture: 'x64'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    - script: |
        flake8 app.py tests/ --max-line-length=120 --exclude=venv,__pycache__ --output-file=flake8-report.txt --format=junit-xml --tee
      displayName: 'Run Flake8 linting'
      continueOnError: true

    - script: |
        python -m pytest tests/ --junitxml=test-results.xml --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
      displayName: 'Run pytest with coverage'

    - script: |
        pip-audit --format=json --output=pip-audit-report.json
      displayName: 'Run pip-audit security scan'
      continueOnError: true

    - script: |
        pip-licenses --format=json --output-file=pip-licenses-report.json --with-urls --with-description
      displayName: 'Generate license report'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: 'test-results.xml'
        testRunTitle: 'Python Tests'
        failTaskOnFailedTests: true
      displayName: 'Publish test results'

    - task: PublishCodeCoverageResults@1
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'coverage.xml'
        reportDirectory: 'htmlcov'
        failIfCoverageEmpty: false
      displayName: 'Publish code coverage'

    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      inputs:
        pathToPublish: 'flake8-report.txt'
        artifactName: 'flake8-report'
      displayName: 'Publish Flake8 report'

    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      inputs:
        pathToPublish: 'pip-audit-report.json'
        artifactName: 'security-report'
      displayName: 'Publish security report'

    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      inputs:
        pathToPublish: 'pip-licenses-report.json'
        artifactName: 'licenses-report'
      displayName: 'Publish licenses report'

- stage: Build
  displayName: 'Build Docker Image'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: BuildDocker
    displayName: 'Build and Push Docker Image'
    steps:
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: 'build'
        dockerfile: 'Dockerfile'
        tags: |
          marketing-insights-dashboard:$(Build.BuildId)
          marketing-insights-dashboard:latest

    - task: Docker@2
      displayName: 'Push Docker image'
      inputs:
        command: 'push'
        tags: |
          marketing-insights-dashboard:$(Build.BuildId)
          marketing-insights-dashboard:latest

- stage: Deploy
  displayName: 'Deploy to Staging'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Staging Environment'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying Marketing Insights Dashboard to staging..."
              # Add deployment scripts here
            displayName: 'Deploy application'

          - script: |
              # Health check after deployment
              curl -f http://staging-marketing-insights.azurewebsites.net/healthz || exit 1
            displayName: 'Health check'
            timeoutInMinutes: 5
